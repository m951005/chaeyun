<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.TaskMapper">

	<!--  category 생성  -->
	<insert id="saveCategory">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			select seq_todo.nextval from dual
		</selectKey>
		insert into category (
			id,
			title
		) values (
			#{id},
			#{title}	
		)
	</insert>
	

	<!--  아이디로 category 조회  -->
	<select id="findCategoryById" resultType="category">
		select
			id,
			title
		from
			category
		where
			id = #{id}
	</select>

	<!--  전체 category 조회  -->
	<select id="findCategories" resultType="category">
		select
			id,
			title
		from
			category
		order by
			id
	</select>

	<!--  category 이름 변경 -->
	<update id="updateCategory">
		update category
		set
			title = #{title}
		where
			id = #{id}
	</update>

	<!--  category 삭제  -->
	<delete id="removeCategoryById">
		delete from category
		where 
			id = #{id}
	</delete>
	

	<!--  task 생성  -->
	<insert id="saveTask">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			select seq_todo.nextval from dual
		</selectKey>
		insert into task (
			title,
			contents,
			category_id,
			deadline,
			id,
			status
		) values (
			#{title},
			#{contents},
			#{category.id},
			#{deadline},
			#{id},
			#{status}
		)
	</insert>
	
	<resultMap type="task" id="taskMap">
		<id property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="contents" column="contents"/>
		<result property="status" column="status"/>
		<result property="createdTime" column="created_time"/>
		<result property="deadline" column="deadline"/>
		<result property="completeTime" column="complete_time"/>
		<association property="category">
			<id property="id" column="category_id"/>
			<result property="title" column="category_title"/>
		</association>
	</resultMap>
	
	<!--  task 상세 조회  -->
	<select id="findTaskById" resultMap="taskMap">
		select
			t.id,
			t.title,
			t.contents,
			t.category_id,
			c.title as category_title,
			t.status,
			t.created_time,
			t.deadline,
			t.complete_time
		from
			task t join category c
			on (t.category_id = c.id)
		where
			t.id = #{id}
	</select>
	

	<!--  task 전체 조회  -->
	
	<select id="findTasks" resultMap="taskMap">
		select
			t.id,
			t.title,
			t.contents,
			t.category_id,
			c.title as category_title,
			t.status,
			t.created_time,
			t.deadline,
			t.complete_time
		from
			task t join category c
			on (t.category_id = c.id)
		order by
			t.category_id,
			t.deadline
	</select>
	

	<!--  task 완료 처리  -->
	<update id="updateTask">
		update task
		set
			status = #{status},
			complete_time = sysdate
		where
			id = #{id}
	</update>
	

	<!--  아이디로 task 삭제  -->
	<delete id="removeTaskById">
		delete from task
		where id = #{id}
	</delete>
	
	<!--  category 아이디로 task 삭제  -->
	<delete id="removeTaskByCategoryId">
		delete from task
		where category_id = #{id}
	</delete>
	
	
</mapper>