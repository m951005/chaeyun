<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.BoardMapper">
	<!-- 게시글 작성 -->
	<insert id="saveBoard">
		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			select seq_board.nextval from dual
		</selectKey>
		insert into board(
			id,
			title,
			contents,
			member_id
		) values (
			#{id},
			#{title},
			#{contents},
			#{member.id}		<!-- private 필드를 바로 불러올 수 없으므로 getter를 member의 id 값을 가져옴 -->
		)
	</insert>
	
	<resultMap type="board" id="boardMap">
		<!-- 
			id: PK에 해당하는 필드(컬럼)
			result: 일반 필드(컬럼)
				- property: 필드명
				- column: 테이블 컬럼명
			id -> result -> association -> collection 순으로 정렬
		 -->
		 <id property="id" column="id"/>
		 <result property="title" column="title"/>
		 <result property="contents" column="contents"/>
		<result property="createdTime" column="created_time"/>
		<result property="lastModifiedTime" column="last_modified_time"/>
		<!-- association: hasOne 관계, 항상 result 정의가 모두 끝난 후에 들어가야 함 / hasMany 관계일 때는 collection 태그 사용 -->
		<association property="member">
			<id property="id" column="member_id"/>
			<result property="name" column="name"/>
		</association>
	</resultMap>
	
	<!-- 게시글 조회 -->
	<select id="findBoardById" resultMap="boardMap">
		select
			b. id,
			b. title,
			b. contents,
			b. member_id,
			m. name,
			b. created_time,
			b. last_modified_time
		from
			board b join member m
			on (b.member_id = m.id)
		where
			b.id = #{id}
	</select>
	
	<!-- 게시글 전체 조회 -->
	<select id="findBoards" resultMap="boardMap">
		select
			b.id,
			b.title,
			b.contents,
			b.member_id,
			m.name,
			b.created_time,
			b.last_modified_time
		from
			board b join member m
			on (b.member_id = m.id)
	</select>	
	
	<!-- 검색 조건으로 게시글 조회 -->
	<select id="findBoardsByCondition">
		select
			b.id,
			b.title,
			b.contents,
			b.member_id,
			m.name,
			b.created_time,
			b.last_modified_time
		from
			board b join member m
			on (b.member_id = m.id)
		<!-- 
			choose when 문법(자바의 switch와 비슷)
		 -->
		 <where>	<!-- choose태그를 쓸 때는 where태그를 같이 사용하는 게 좋음 -->
		 	<choose>
		 		<when test="title != null">title like '%' || #{title} || '%'</when>		<!-- like문을 mybatis에서 변수처리한 부분과 같이 사용할 때 '||' 사용. '+'와 같이 합쳐줌 -->
		 		<when test="contents != null">contents like '%' || #{contents} || '%'</when>
		 		<otherwise>title is not null and contents is not null</otherwise>
			</choose>
		</where>	
	</select>
	
	<!-- 여러 아이디로 게시글 조회 -->
	<select id="findBoardsByIds">
		select
			b.id,
			b.title,
			b.contents,
			b.member_id,
			m.name,
			b.created_time,
			b.last_modified_time
		from
			board b join member m
			on (b.member_id = m.id)
		where
			b.id in
			<!--
				foreach 태그
				- collection: list or array
				- item: 변수명
				- open: 시작하는 문자값
				- close: 끝나는 문자값
				- separator: 구분값 
			-->
			<foreach collection="list" item="id" open="(" close=")" separator=",">
				#{id}
			</foreach>
	</select>
	
	<!-- 게시글 삭제 -->
	<delete id="removeBoardByMemberId">
		delete from board
		where
			member_id = #{id}
	</delete>

</mapper>





